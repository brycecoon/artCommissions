@page "/prices"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Web;
@inject IDbContextFactory<PostgresContext> contextFactory
@inject IJSRuntime JSRuntime


@if (exampleImages is not null)
{
    <div class="d-flex flex-column p-5">
        @foreach (var commissionExample in Commissions)
        {
            <h3 class="d-flex justify-content-center">@commissionExample.CommissionType</h3>

            @* Carousel *@
            <div id="@(carouselName + commissionExample.Id)" class="d-flex justify-content-center align-items-center carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="3000" data-bs-pause="false">
                @for (int i = 0; i < d[commissionExample.Id].Count(); i++)
                {
                    @if (i == 0)
                    {
                        <div class="carousel-item active">
                            <img class="img img-responsive rounded" src="data:image/jpeg;base64,@Convert.ToBase64String(d[commissionExample.Id][i].Image)" />
                        </div>
                    }
                    else
                    {
                        <div class="carousel-item">
                            <img class="img img-responsive rounded" src="data:image/jpeg;base64,@Convert.ToBase64String(d[commissionExample.Id][i].Image)" />
                        </div>
                    }
                }
            </div>

            @* Art info *@
            <div class="d-flex flex-column p-5">
                <div class="d-flex justify-content-center">
                    <p>@commissionExample.Price</p>
                </div>
                
                <div class="d-flex justify-content-center px-5">
                    <p>@commissionExample.Description</p>
                </div>
            </div>
        }
    </div>
}

@code {
    public int ArtistID { get; set; } = 1;
    public string? Name { get; set; }
    public string? About { get; set; }
    private byte[]? pfp { get; set; }

    private IEnumerable<ExampleImage>? exampleImages { get; set; }
    private IEnumerable<CommissionExample>? Commissions;

    private Dictionary<int, List<ExampleImage>> d = new();

    const string carouselName = "carouselExampleIndicators";
    private bool isInitialized = false;


    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        Commissions = await context.CommissionExamples
            .Where(i => i.ArtistId == 1)
            .ToArrayAsync();

        exampleImages = await context.ExampleImages
            .Where(i => i.IsInCarousel == true)
            .ToListAsync();

        foreach (var commissionExample in Commissions)
        {
            d[commissionExample.Id] = exampleImages.Where(i => i.CommissionExampleId == commissionExample.Id).ToList();
        }

        isInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isInitialized)
        {
            foreach (var commissionExample in Commissions)
            {
                object[] args = { carouselName + commissionExample.Id };
                await JSRuntime.InvokeVoidAsync("startCarousel", args);
            }
        }
    }
}