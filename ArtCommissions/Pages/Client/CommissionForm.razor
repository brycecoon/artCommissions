@page "/create_request"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<PostgresContext> contextFactory

<div class="container p-3 w-xs-25 w-lg-25">

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">
            What's your name?
            @if (!nameSelected)
            {
                <small class="text-danger">* This field is required</small>
            }
        </label>

        <div class="form-group p-2 d-flex flex-row justify-content-around">
            <span class="flex-fill mx-3">
                <input class="form-control" aria-describedby="nameHelp" placeholder="Enter Name" @bind="Name">
            </span>
            <span class="flex-fill mx-3">
                <input type="email" class="form-control" aria-describedby="emailHelp" placeholder="Enter email" @bind="Email">
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </span>
        </div>
    </div>

    @if (commissionExamples is not null)
    {
        <div class="container p-2 my-3 d-flex flex-column justify-content-center">
            <label class="form-label mx-2">
                What do you want me to draw?
                @if (!typeSelected)
                {
                    <small class="text-danger">* This field is required</small>
                }
            </label>

            <div class="form-group p-2 mx-3">
                @foreach (var cr in commissionExamples)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onchange="() => selectedType = cr.CommissionType">
                        <label class="form-check-label" for="flexRadioDefault1">
                            @cr.CommissionType
                        </label>
                    </div>
                }
            </div>
        </div>
    }

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">Please describe what you are thinking! Background (colored or grayscale, painted style?), Perspective ("from the sky, from below"), Pose ("slouched over, heroic...") or anything else you want me to include.</label>

        <div class="form-group mx-3">
            <textarea class="form-control h-25" id="exampleFormControlTextarea1" rows="3" @bind="commissionDetails">Type here...</textarea>
            <small class="form-text text-muted">If you don't have anything in mind, just leave this empty</small>
        </div>
    </div>

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">Do you have an example? Any specific photo, art, or other media that will help me understand what you are thinking?</label>

        <div class="form-group mx-3">
            <div class="mb-3">
                <InputFile OnChange="@HandleFileChange" />
            </div>
        </div>
    </div>

    <div class="container p-2 d-flex align-items-center">
        <div class="form-group p-2 d-flex flex-row justify-content-around">
            <span class="flex-fill align-items-center">
                <label class="form-label">Here's the cost: $100</label>
            </span>
        </div>

    </div>

    <div class="p-2 my-3 d-flex justify-content-center">
        <div class="d-flex align-self-stretch">
            <label class="d-flex align-items-center">Is everything in order?</label>
        </div>

        <div class="mx-3">
            <button class="btn btn-primary" @onclick="async () => {await CreateNewRequest(); }">Submit</button>
        </div>
    </div>
</div>


@code {
    private byte[]? imageBytes { get; set; } = null;
    private List<CommissionExample>? commissionExamples { get; set; }
    private List<CommissionRequest>? commissionRequests;

    private bool nameSelected = true;
    private bool typeSelected = true;

    private string? Name = null;
    private string Email = "";
    private string commissionDetails = "";
    private string? selectedType = null;



    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        var art = await context.ExampleImages
            .FirstOrDefaultAsync(i => i.Id == 1);           ///////////HARD CODED VALUE///////////////

        if (art is not null)
        {
            imageBytes = art.Image;
        }

        commissionRequests = await context.CommissionRequests
            .ToListAsync();

        commissionExamples = await context.CommissionExamples
            .ToListAsync();

    }


    private async Task CreateNewRequest()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            if (Name is null)
            {
                nameSelected = false;
                return;
            }
            else
            {
                nameSelected = true;
            }

            if (selectedType is null)
            {
                typeSelected = false;
                return;
            }

            var request = new CommissionRequest();

            string[] n = Name.Split(" ");
            request.Firstname = n[0];
            request.Lastname = n.Count() == 1 ? "" : n[1];
            request.Email = Email;
            request.Details = commissionDetails;
            request.AcceptedStatus = "PENDING";
            request.ArtistId = 1;                 /////////////////////////////////HARD CODED VALUE///////////////////////////
            request.CommissionType = selectedType;
            await context.CommissionRequests.AddAsync(request);

            await context.SaveChangesAsync();
            await SaveFileToDatabase(request, context);
        }

    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        // var stream = file.OpenReadStream();
        using (var stream = e.File.OpenReadStream(8000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                imageBytes = memoryStream.ToArray();
            }
        }
    }

    private async Task SaveFileToDatabase(CommissionRequest cr, PostgresContext context)
    {
        try
        {
            ReferenceImage art = new ReferenceImage()
                {
                    Image = imageBytes,
                    CommissionRequestId = cr.Id
                };
            imageBytes = null;
        }
        catch
        {

        }
    }
}
