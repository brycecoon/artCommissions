@page "/create_request"
@using ArtCommissions.Data;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<PostgresContext> contextFactory
@inject NavigationManager navigationManager
@inject ILogger<Form> logger

<div class="container p-3 w-xs-25 w-lg-25">

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">
            What's your name?
            @if (!form.NameIsSelected)
            {
                <small class="text-danger">* This field is required</small>
            }
        </label>

        <div class="form-group p-2 d-flex flex-row justify-content-around">
            <span class="flex-fill mx-3">
                <input class="form-control" id="nameInput" aria-describedby="nameHelp" placeholder="Enter Name" @bind="form.Name">
            </span>
            <span class="flex-fill mx-3">
                <input type="email" class="form-control" id="emailInput" aria-describedby="emailHelp" placeholder="Enter email" @bind="form.Email">
                <small id="emailHelp" class="d-none d-lg-flex form-text text-muted">We'll never share your email with anyone else.</small>
                @if (!form.ValidEmail)
                {
                    <small class="text-danger">* Please input a valid email</small>
                }
            </span>
        </div>
    </div>

    @if (form.commissionExamples is not null)
    {
        <div class="container p-2 my-3 d-flex flex-column justify-content-center">
            <label class="form-label mx-2">
                What level of quality do you want?
                @if (!form.TypeIsSelected)
                {
                    <small class="text-danger">* This field is required</small>
                }
            </label>

            <div class="form-group p-2 mx-3">
                @foreach (var cr in form.commissionExamples)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadio" id="exampleRadio1" @onclick="() => {form.SelectedType = cr.CommissionType; price=cr.Price; }">
                        <label class="form-check-label" for="exampleRadio1" id=@cr.CommissionType>
                            @cr.CommissionType
                        </label>
                    </div>
                }
            </div>
        </div>
    }

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">Please describe what you are thinking! Background (colored or grayscale, painted style?), Perspective ("from the sky, from below"), Pose ("slouched over, heroic...") or anything else you want me to include.</label>

        <div class="form-group mx-3">
            
            <textarea class="form-control h-25" id="exampleFormControlTextarea1" rows="3" @bind:event="oninput" @bind="form.CommissionDetails">Type here...</textarea>
            <div class="px-2 d-flex justify-content-between">
                <small class="d-none d-lg-flex xt-muted">If you don't have anything in mind, just leave this empty</small>
                <small class="p-lg-2 d-flex justify-content-end">Chars left: @(MAX_TEXT_COUNT - form.CommissionDetails.Count())</small>
            </div>
        </div>
    </div>

    <div class="container p-2 my-3 d-flex flex-column justify-content-center">
        <label class="form-label mx-2">Do you have an example? Any specific photo, art, or other media that will help me understand what you are thinking?</label>

        <div class="form-group mx-3">
            <div class="mb-3">
                <InputFile OnChange="HandleFileChange" />
            </div>
        </div>
    </div>

    <div class="container p-2 d-flex align-items-center">
        <div class="form-group p-2 d-flex flex-row justify-content-around">
            <span class="flex-fill align-items-center">
                <label class="form-label">Here's the estimated cost: $@price</label>
                <p>Please be aware that costs can change based on complexity</p>
            </span>
        </div>

    </div>

    <div class="p-2 my-3 d-flex justify-content-center">
        <div class="d-flex align-self-stretch">
            <label class="d-flex align-items-center">Is everything in order?</label>
        </div>

        <div class="mx-3">
            <button class="btn btn-floating btn-primary" id="submit" @onclick="async () => { 
                                                await form.CreateNewRequest();
                                                Navigate();
                                            }">
                Submit
            </button>
        </div>
    </div>
</div>


@code {
    const int MAX_TEXT_COUNT = 500;
    Form form;
    decimal? price;
    public bool IsDataLoaded { get; private set; } = false;

    private void Navigate()
    {
        if (form.NameIsSelected == true && form.TypeIsSelected == true && form.ValidEmail == true)
        {
            navigationManager.NavigateTo("/ConfirmSubmit");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var context = contextFactory.CreateDbContext();
            form = new Form(context, logger); // Inject the context into the Form constructor

            IsDataLoaded = true;
        }
        catch (Exception ex)
        {
            logger.LogError($"An error occurred during initialization: {ex.Message}");
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        using (var stream = e.File.OpenReadStream(1000000)) // 1MB
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                form.imageBytes = memoryStream.ToArray();
            }
        }
    }
}
