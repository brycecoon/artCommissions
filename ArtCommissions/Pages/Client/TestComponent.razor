@page "/test"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@using System.Drawing;
@using System.IO;

@inject IDbContextFactory<PostgresContext> contextFactory

<h3>Component</h3>

<div class="my-3 d-flex">
    <InputFile OnChange="@HandleFileChange" />
    <button class="btn btn-primary d-inline mx-2" @onclick="SaveFileToDatabase">Upload</button>
</div>

@if (imageBytes != null)
{
    <img src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes)" alt="Test Image" />
}
else
{
    <p>No image</p>
}


@code {
    private byte[] imageBytes { get; set; } = null;
    private byte[] uploadImagesBytes { get; set; } = null;
    private IBrowserFile? file = null;

    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        var art = await context.ExampleImages
            .FirstOrDefaultAsync(i => i.Id == 1);
        imageBytes = art.Image;
    }


    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task SaveFileToDatabase()
    {
        if (file == null) { return; }

        var context = contextFactory.CreateDbContext();
        // var stream = file.OpenReadStream();
        using (var stream = file.OpenReadStream(8000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);

                ExampleImage art = new ExampleImage()
                    {
                        Image = memoryStream.ToArray()
                    };

                // Save to the database using DbContext
                await context.ExampleImages.AddAsync(art);
                await context.SaveChangesAsync();
            }
        }
    }
}