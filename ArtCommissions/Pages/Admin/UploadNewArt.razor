@page "/admin/upload"
@using ArtCommissions.Data;
@using System.Drawing;
@using System.IO;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<PostgresContext> contextFactory

<div class="container d-flex flex-column justify-content-center py-5">
    <div class="d-flex justify-content-center w-100">
        @if (uploadImagesBytes is null)
        {
            <img class="mt-2 mw-100" src="images/imageUpload.png" alt="Upload Image" />
        }
        else
        {
            <img class="mt-2 mw-100 rounded" src="data:image/png;base64,@Convert.ToBase64String(uploadImagesBytes)" alt="Uploaded Image" />
        }
    </div>

    <div>
        <p class="d-flex justify-content-center mt-2">Head over to the edit images page to change their tags</p>

        <div class="my-3 d-flex justify-content-center">
            <InputFile OnChange="@HandleFileChange" />
            <button class="btn btn-primary d-inline mx-2" @onclick="SaveFileToDatabase">Upload</button>
        </div>

        @if (confirmationMessage is not null)
        {
            <p class="text-center dissapear">@confirmationMessage</p>
            <!-- using the class makes the message disappear -->
        }
    </div>
</div>

@code {
    //get upload logic from the test component, make it look nice
    private byte[]? uploadImagesBytes = null;
    private string? confirmationMessage = null;
    private List<CommissionExample> types { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        var types = await context.CommissionExamples
        .Where(c => c.ArtistId == 1)
        .ToListAsync();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        using (var stream = e.File.OpenReadStream(8000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                uploadImagesBytes = memoryStream.ToArray();
            }
        }
    }

    private async Task SaveFileToDatabase()
    {
        if (uploadImagesBytes is null) { confirmationMessage = "no file selected"; return; }

        try
        {
            var context = contextFactory.CreateDbContext();

            ExampleImage art = new ExampleImage()
                {
                    Image = uploadImagesBytes
                };

            // Save to the database using DbContext
            await context.ExampleImages.AddAsync(art);
            await context.SaveChangesAsync();

            confirmationMessage = "Image uploaded successfully";
            uploadImagesBytes = null;
        }
        catch
        {
            confirmationMessage = "Image failed to upload";
        }
    }
}
