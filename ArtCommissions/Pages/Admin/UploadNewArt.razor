@page "/admin/upload"
@using ArtCommissions.Data;
@using System.Drawing;
@using System.IO;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<PostgresContext> contextFactory

<div class="container d-flex flex-column justify-content-center py-5">
    <div class="d-flex justify-content-center w-100">
        @if (uploadImagesBytes is null)
        {
            <img class="mt-2 mw-100" src="images/imageUpload.png" alt="Upload Image" />
        }
        else
        {
            <img class="mt-2 mw-100` rounded" src="data:image/png;base64,@Convert.ToBase64String(uploadImagesBytes)" alt="Uploaded Image" />
        }
    </div>


    <div>
        <div class="text-center">
            <InputFile OnChange="@HandleFileChange" class="m-2"/>
            <br/>

            <div class="text-center m-3">
                Choose a commission type for this art

                <select class="form-select mb-2 " @onchange="e => HandleCommissionChange(e.Value.ToString())">
                    @if (commissions is not null)
                    {
                        @foreach (var row2 in commissions)
                        {
                            <option value="@row2.CommissionType">@row2.CommissionType</option>
                        }
                    }
                    <option>No Type</option>
                </select>
            </div><br />

            <button class="btn btn-primary d-inline mx-2" @onclick="SaveFileToDatabase">Upload</button>
        </div>

        @if (confirmationMessage is not null)
        {
            <p class="text-center dissapear">@confirmationMessage</p>
            <!-- using the class makes the message disappear -->
        }
    </div>

</div>

@code {
    //get upload logic from the test component, make it look nice
    private byte[]? uploadImagesBytes = null;
    private string? confirmationMessage = null;
    private List<CommissionExample>? types { get; set; }
    private List<CommissionExample>? commissions;
    private string selectedCommission;

    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        var types = await context.CommissionExamples
        .Where(c => c.ArtistId == 1)
        .ToListAsync();

        commissions = await context.CommissionExamples
    .Where(c => c.ArtistId == 1)
    .OrderBy(c => c.Id)
    .ToListAsync();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        using (var stream = e.File.OpenReadStream(50000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                uploadImagesBytes = memoryStream.ToArray();
            }
        }
    }

    private void HandleCommissionChange(string value)
    {
        selectedCommission = value;
    }

    private async Task SaveFileToDatabase()
    {
        if (uploadImagesBytes is null) { confirmationMessage = "no file selected"; return; }

        try
        {
            var context = contextFactory.CreateDbContext();

            var tryAdd = context.CommissionExamples
            .Where(c => c.ArtistId == 1)
            .Where(c => c.CommissionType == selectedCommission)
            .FirstOrDefault();

            ExampleImage art = new ExampleImage()
                {
                    CommissionExampleId = tryAdd.Id,
                    Image = uploadImagesBytes
                };

            // Save to the database using DbContext
            await context.ExampleImages.AddAsync(art);
            await context.SaveChangesAsync();

            confirmationMessage = "Image uploaded successfully";
            uploadImagesBytes = null;
        }
        catch
        {
            confirmationMessage = "Image failed to upload";
        }
    }
}
