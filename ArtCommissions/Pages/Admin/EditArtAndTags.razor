@page "/admin/edit_art"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<PostgresContext> contextFactory


<h3>Edit The Art!</h3>
<h4>Here you can put your art in a carousel, delete your art, or change the type</h4>
<div class="row row-cols-1 row-cols-md-2 g-4">
    @if (exampleImages is not null)
        @foreach (var row in exampleImages)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="text-center">
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(row.Image)" alt="Los Angeles" class="card-img-top img-fluid" style="max-height: 200px; object-fit: contain;">
                    </div>
                    <div class="card-body">
                        @if (row.CommissionExampleId.HasValue && commissions != null)
                        {
                            <p class="card-text">Commission type: @row.CommissionExample.CommissionType</p>
                        }
                        else
                        {
                            <p class="card-text">Commission type: N/A</p>
                        }

                        <select class="form-select mb-2" value="@selectedCommissions[row.Id]" @onchange="e => HandleCommissionChange(row.Id, e.Value.ToString())">
                            @foreach (var row2 in commissions)
                            {
                                <option value="@row2.CommissionType">@row2.CommissionType</option>
                            }
                            <option>No Type</option>
                        </select>

                        @if (row.IsInCarousel.HasValue && row.IsInCarousel.Value)
                        {
                            <p class="card-text">Item Currently in Carousel: Yes</p>
                        }
                        else
                        {
                            <p class="card-text">Item Currently in Carousel: No</p>
                        }

                        <p class="card-text">Show this image in the Carousel?</p>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" @onchange="() => isInCarousel = true" name="carousel">
                            <label class="form-check-label" for="inCarousel">Yes</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" @onchange="() => isInCarousel = false" name="carousel">
                            <label class="form-check-label" for="notInCarousel">No</label>
                        </div>

                        <button @onclick="() => EditTag(row)" class="btn btn-primary">Save New Type</button>
                        <button @onclick="() => Deny(row)" class="btn btn-danger">Delete Image</button>
                    </div>
                </div>
            </div>
        }
</div>

@code {
    //TODO: Cycle through the art, click on one, and then be able to edit the tags
    public int ArtistID { get; set; } = 1;
    private List<ExampleImage>? exampleImages { get; set; }
    private List<int[]> imageBytes { get; set; } = new();
    private byte[]? pfp { get; set; }
    private List<CommissionExample>? commissions;
    private List<int> imageid { get; set; } = new();
    private string selectedCommission;
    private Dictionary<int, string> selectedCommissions { get; set; } = new Dictionary<int, string>();
    private bool isInCarousel;

    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        commissions = await context.CommissionExamples
        .OrderBy(c => c.Id)
        .ToListAsync();

        exampleImages = await context.ExampleImages
            .ToListAsync();

       foreach (var image in exampleImages)
        {
            selectedCommissions[image.Id] = commissions.FirstOrDefault(c => c.Id == image.Id)?.CommissionType ?? "No Type";
        }
    }

    private void HandleCommissionChange(int imageId, string value)
    {
        selectedCommissions[imageId] = value;
    }

    public async Task Deny(ExampleImage cr)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var request = await context.ExampleImages
                .Where(c => c.Id == cr.Id)
                .FirstOrDefaultAsync();

            if (request != null)
            {
                // Mark the entity for deletion
                context.ExampleImages.Remove(request);

                // Save changes to the database
                await context.SaveChangesAsync();
            }
        }
    }

    public async Task EditTag(ExampleImage cr)
    {
        if (cr is null)
        {
            throw new ArgumentNullException(nameof(cr));
        }

        using (var context = contextFactory.CreateDbContext())
        {
            var request = await context.ExampleImages
                .Where(c => c.Id == cr.Id)
                .FirstOrDefaultAsync();


            if (request != null)
            {
                var selectedCommission = selectedCommissions[cr.Id];

                var newType = await context.CommissionExamples
                .Where(c => c.CommissionType == selectedCommission)
                .FirstOrDefaultAsync();

                if (newType != null || selectedCommission == "No Type")
                {
                    if (selectedCommission == "No Type")
                    { request.CommissionExampleId = null; }
                    else
                    // Edit what you need to
                    {
                        request.CommissionExampleId = newType.Id;
                    }

                    // Save changes to the database
                }

                if (isInCarousel)
                    request.IsInCarousel = true;
                else
                    request.IsInCarousel = false;

                await context.SaveChangesAsync();
            }
        }
    }
}
