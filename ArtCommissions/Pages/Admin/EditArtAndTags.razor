@page "/admin/edit_art"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<PostgresContext> contextFactory


<h3 class="p-3 text-center">Edit The Art!</h3>
<h4 class="pt-1 text-center">Here you can put your art in a carousel, delete your art, or change the type</h4>
<h4 class="py-1 text-center">as well as change what types of commission you accept</h4>

<button class="btn btn-primary p-md-1 m-4" value="@editCommission" @onclick="ToggleEditCommission">Edit commission types</button>
<br>
@if (editCommission)
{
    <table class="table">
        <thead>
            <tr>
                <th>Commission Type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (updatedType.Count() > 0) // to make sure that we can actually populate these rows
            {
                @foreach (var row in commissions)
                {
                    <tr>
                        <td><input type="text" @bind="@updatedType[row.Id]" placeholder="@row.CommissionType"></td>
                        <td><input type="text" @bind="@updatedDescription[row.Id]" placeholder="@row.Description"></td>
                        <td> <input type="text" @bind="@updatedPrice[row.Id]" placeholder="@row.Price"></td>
                        <td><button class="btn btn-primary" @onclick="() => HandleEditType(row.Id)">Save Changes</button></td>
                    </tr>
                }

            }
            <tr>
                <td>
                    <button class="btn btn-primary p-md-1 m-4" @onclick="ToggleAddCommission">Add a new commission type</button>
                </td>
            </tr>

            @if (addCommission)
            {
                <input type="text" @bind="@newCommissionType" placeholder="Commission Type Name">
                <input type="text" @bind="@newCommissionDescription" placeholder="Description of Commisson type">
                <input type="text" @bind="@newCommissionPrice" placeholder="Starter Price $:">
                <button class="btn btn-primary" @onclick="() => HandleAddType()">Save Changes</button>

            }
        </tbody>
    </table>
}

<div class="row row-cols-1 row-cols-md-2 g-4">
    @if (exampleImages is not null)
        @foreach (var row in exampleImages)
        {
            <div class="col mb-4">
                <div class="card py-md-2 mx-1 mx-md-2 text-center p-3" style="background-color: #D5DB9F; border: none;">
                    <div class="card h-100 custom-background p-3" style="background-color: blanchedalmond">
                        <div class="text-center">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(row.Image)" class="card-img-top img-fluid mt-3" style="max-height: 200px; object-fit: contain;">
                        </div>
                        <div class="card-body">
                            @if (row.CommissionExampleId != null && row.CommissionExample != null)
                            {
                                <p class="text-left">Commission type: @row.CommissionExample.CommissionType</p>
                            }
                            else
                            {
                                <p class="card-text">Commission type: N/A</p>
                            }

                            <select class="form-select mb-2" value="@selectedCommissions[row.Id]" @onchange="e => HandleCommissionChange(row.Id, e.Value.ToString())">
                                @foreach (var row2 in commissions)
                                {
                                    <option value="@row2.CommissionType">@row2.CommissionType</option>
                                }
                                <option>No Type</option>
                            </select>

                            @if (row.IsInCarousel.HasValue && row.IsInCarousel.Value)
                            {
                                <p class="card-text">Item Currently in Carousel: Yes</p>
                            }
                            else
                            {
                                <p class="card-text">Item Currently in Carousel: No</p>
                            }

                            <p class="card-text">Show this image in the Carousel?</p>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" @onchange="() => isInCarousel = true" name="carousel">
                                <label class="form-check-label" for="inCarousel">Yes</label>
                            </div>
                            <div class="form-check form-check-inline mb-2">
                                <input class="form-check-input" type="radio" @onchange="() => isInCarousel = false" name="carousel">
                                <label class="form-check-label" for="notInCarousel">No</label>
                            </div><br>

                            <button @onclick="() => EditTag(row)" class="btn btn-primary">Save New Type</button>
                            <button @onclick="() => Deny(row)" class="btn btn-danger">Delete Image</button>
                        </div>
                    </div>
                </div>
            </div>
        }
</div>

<style>
    /* Add this to your stylesheet or in a tag in the Blazor component */
    .custom-background1 {
        background-color: #2FE4FD;
    }

    .custom-background {
        background-color: #C6F8FF
    }

</style>

@code {
    //TODO: Cycle through the art, click on one, and then be able to edit the tags
    public int ArtistID { get; set; } = 1;
    private List<ExampleImage>? exampleImages { get; set; }
    private List<int[]> imageBytes { get; set; } = new();
    private byte[]? pfp { get; set; }
    private List<CommissionExample>? commissions;
    private List<int> imageid { get; set; } = new();
    private string selectedCommission;
    private Dictionary<int, string> selectedCommissions { get; set; } = new Dictionary<int, string>();
    private bool isInCarousel;
    private bool editCommission = false;
    private Dictionary<int, string> updatedType { get; set; } = new Dictionary<int, string>();
    private Dictionary<int, string> updatedDescription { get; set; } = new Dictionary<int, string>();
    private Dictionary<int, decimal> updatedPrice { get; set; } = new Dictionary<int, decimal>();
    private string newCommissionType;
    private string newCommissionDescription;
    private decimal newCommissionPrice;
    private bool addCommission = false;
    CommissionExample newCommission = new CommissionExample();


    protected override async Task OnInitializedAsync()
    {
        var context = contextFactory.CreateDbContext();

        commissions = await context.CommissionExamples
        .Where(c => c.ArtistId == 1)
        .OrderBy(c => c.Id)
        .ToListAsync();

        exampleImages = await context.ExampleImages
        .Where(c => c.CommissionExample.ArtistId == 1)
            .ToListAsync();

        foreach (var image in exampleImages)
        {
            selectedCommissions[image.Id] = commissions.FirstOrDefault(c => c.Id == image.Id)?.CommissionType ?? "No Type";
        }

        foreach (var type in commissions)
        {
            updatedType[type.Id] = commissions.FirstOrDefault(c => c.Id == type.Id)?.CommissionType;
            updatedDescription[type.Id] = commissions.FirstOrDefault(c => c.Id == type.Id)?.Description;
            updatedPrice[type.Id] = commissions.FirstOrDefault(c => c.Id == type.Id)?.Price ?? 0m;
        }
    }

    private void HandleCommissionChange(int imageId, string value)
    {
        selectedCommissions[imageId] = value;
    }

    public async Task Deny(ExampleImage cr)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var request = await context.ExampleImages
                .Where(c => c.Id == cr.Id)
                .FirstOrDefaultAsync();

            if (request != null)
            {
                // Mark the entity for deletion
                context.ExampleImages.Remove(request);

                // Save changes to the database
                await context.SaveChangesAsync();
            }
        }
    }

    public async Task EditTag(ExampleImage cr)
    {
        if (cr is null)
        {
            throw new ArgumentNullException(nameof(cr));
        }

        using (var context = contextFactory.CreateDbContext())
        {
            var request = await context.ExampleImages
                .Where(c => c.Id == cr.Id)
                .FirstOrDefaultAsync();


            if (request != null)
            {
                var selectedCommission = selectedCommissions[cr.Id];

                var newType = await context.CommissionExamples
                .Where(c => c.CommissionType == selectedCommission)
                .FirstOrDefaultAsync();

                if (newType != null || selectedCommission == "No Type")
                {
                    if (selectedCommission == "No Type")
                    { request.CommissionExampleId = null; }
                    else
                    // Edit what you need to
                    {
                        request.CommissionExampleId = newType.Id;
                    }

                    // Save changes to the database
                }

                if (isInCarousel)
                    request.IsInCarousel = true;
                else
                    request.IsInCarousel = false;

                await context.SaveChangesAsync();
            }
        }
    }

    private async Task HandleEditType(int cr)
    {
        if (cr == null)
        {
            throw new ArgumentNullException(nameof(cr));
        }

        using (var context = contextFactory.CreateDbContext())
        {
            var request = await context.CommissionExamples
            .Where(c => c.Id == cr)
            .FirstOrDefaultAsync();

            if (request is not null)
            {
                request.CommissionType = updatedType[cr];
                request.Description = updatedDescription[cr];
                request.Price = updatedPrice[cr];
            }

            await context.SaveChangesAsync();
            editCommission = false;
        }
    }

    private async Task HandleAddType()
    {
        var context = contextFactory.CreateDbContext();

        CommissionExample newCommission = new CommissionExample()
            {
                CommissionType = newCommissionType,
                Description = newCommissionDescription,
                Price = newCommissionPrice,
                ArtistId = 1
            };

        updatedType[newCommission.Id] = newCommissionType;
        updatedDescription[newCommission.Id] = newCommissionDescription;
        updatedPrice[newCommission.Id] = newCommissionPrice;


        await context.CommissionExamples.AddAsync(newCommission);
        await context.SaveChangesAsync();

        addCommission = false;
    }

    void ToggleAddCommission()
    {
        addCommission = !addCommission;
    }

    void ToggleEditCommission()
    {
        editCommission = !editCommission;
    }
}
