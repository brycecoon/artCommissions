@page "/admin/profile"
@using ArtCommissions.Data;
@using System.Drawing;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;
@inject IDbContextFactory<PostgresContext> contextFactory
@inject NavigationManager navManager
@inject HttpClient httpclient

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "admins")]





@if (isEditing)
{
	<div class="container p-3 w-xs-25 w-lg-25">
		<h3>Artist Profile and Stats</h3>
		<div class="form-group p-2 d-flex flex-row justify-content-around">
			<input type="text" @bind="tempfname" />

			<input type="text" @bind="templname" /> <br />

		</div>

		<div>
			<textarea @bind="tempaboutme" @bind:event="oninput" maxlength="@MAX_TEXT_COUNT" rows="4" cols="150"/>
			<label>Chars left: @(MAX_TEXT_COUNT - aboutme.Count())</label>
		</div>
		<div class="d-flex flex-row justify-content-center">
			<button class="btn btn-primary" @onclick="()=>{Save();}">Save</button>
			<button class="btn btn-danger" @onclick="()=>{Cancel();}"> Cancel</button>
		</div>
	</div>
}
else
{
	<div class="container p-3 w-xs-25 w-lg-25">
		<h3 class="d-flex flex-row justify-content-center">Artist Profile</h3>
		<div>

			<p> Profile of @fname @lname</p>
		</div>
		<hr />
		<p> about me: @aboutme</p>
		<hr />
		<p> Total forms filled out : @result</p>
		<div class="d-flex flex-row justify-content-center">
			<button class="btn btn-primary" @onclick="()=>{Editing();}">Edit</button>
		</div>
	</div>
}

@code {
	//TODO: still need to make artist profile table in our database (profile picture)
	const int MAX_TEXT_COUNT = 500;
	[Parameter]
	public int id { get; set; } = 1;
	public string? fname { get; set; }
	public string? lname { get; set; }
	public string? aboutme { get; set; }
	private string? tempfname { get; set; }
	private string? templname { get; set; }
	public string? tempaboutme { get; set; }
	public int result { get; set; }
	//public string? socials { get; set; }
	public bool isEditing = false;

	public void Editing()
	{
		if (isEditing)
		{
			isEditing = false;
		}
		else
		{
			tempfname = fname;
			templname = lname;
			tempaboutme = aboutme;
			isEditing = true;
		}
	}

	public  void Cancel()
	{
		Editing();
	}

	public async void Save()
	{
		var context = contextFactory.CreateDbContext();

		var artist = await context.Artists.FirstOrDefaultAsync(i => i.Id == id);
		if (tempfname is not null && templname is not null && tempaboutme is not null)
		{
			artist.Firstname = tempfname;
			artist.Lastname = templname;
			artist.Aboutme = tempaboutme;
			await context.SaveChangesAsync();
		}
		fname = tempfname;
		lname = templname;
		aboutme = tempaboutme;
		Editing();
	}

	protected override async Task OnInitializedAsync()
	{
		using var context = contextFactory.CreateDbContext();

		var artist = await context.Artists.Include(a => a.Socials)
			.FirstOrDefaultAsync(i => i.Id == id);


		fname = artist.Firstname;
		lname = artist.Lastname;
		aboutme = artist.Aboutme;
		//socials = artist.Socials.;
		var response = await httpclient.GetAsync("https://localhost:7087/CommissionRequest/1");
		var content = await response.Content.ReadAsStringAsync();
		try
		{
			var resultCount = int.Parse(content);
			result = resultCount;
		}
		catch
		{
			result = 0;
		}
	}

	async Task refreshAsync()
	{


	}
}
