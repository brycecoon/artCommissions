@page "/admin/commissions"

@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<PostgresContext> contextFactory

<h3>modifyCommissionRequests</h3>

<table class="table">
	<tr>
		<th>name</th>
		<th>CommissionType</th>
		<th>Description</th>
		<th>email</th>
		<th>Cost</th>
		<th>AmmountPaid</th>
	</tr>

	@foreach (CommissionRequest cr in Commissions)
	{
		<tr>
			<td>
				@cr.Firstname @cr.Lastname
			</td>
			<td>
				@cr.CommissionType
			</td>
			<td>@cr.Details</td>
			<td>
				@cr.Email
			</td>
			<td>
				@cr.CommissionCost
			</td>
			<td>
				@cr.AmmountAlreadyPaid
			</td>
			@if (cr.AcceptedStatus == "PENDING")
			{
				<td>
					<button @onclick="(async () => {await Accept(1);})" class="btn btn-primary">Accept</button>
				</td>
				<td>
					<button @onclick="() => Deny(cr)" class="btn btn-danger">Deny</button> @*delete sets to null*@
				</td>
			}
		</tr>
	}

</table>

@code {
	//TODO: display for each commission the client name, description, type, estimated time, and estimated cost

	public List<CommissionRequest> Commissions = new();
	protected override async Task OnInitializedAsync()
	{
		var context = contextFactory.CreateDbContext();

		Commissions = await context.CommissionRequests.Where(i => i.ArtistId == 1).ToListAsync();
	}
	public async Task Accept(int i)
	{
		var context = contextFactory.CreateDbContext();

		CommissionRequest crtoupdate = await context.CommissionRequests
						.Where(c => c.Id == i)
					.FirstOrDefaultAsync();

		if (crtoupdate != null)
		{
			crtoupdate.AcceptedStatus = "ACCEPTED";
		}

		await context.SaveChangesAsync();

	}
	public void Deny(CommissionRequest cr)
	{
		var context = contextFactory.CreateDbContext();
		context.Add(cr);
		cr.AcceptedStatus = null;
		context.SaveChangesAsync();
	}

}
