@page "/admin/commissions"

@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<PostgresContext> contextFactory
@inject NavigationManager nav
@inject ILogger<PostgresContext> logger

<div class="my-5" style="margin: auto; max-width: 80%; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;">
    <table class="table table-striped" style="width: 100%; border-collapse: collapse; border-spacing: 0; font-size: 14px;">
        <thead style="background-color: #f8f9fa; text-align: center;">
            <tr>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Name</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Commission Type</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Description</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">References</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Email</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Cost</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Amount Paid</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;">Accepted Status</th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;"></th>
                <th scope="col" style="border: 1px solid #dee2e6; padding: 10px;"></th>
            </tr>
        </thead>
        <tbody>
            @if (commissions is not null && commissions.Count > 0)
                @foreach (var cr in commissions)
                {
                    <tr style="border: 1px solid #dee2e6;">
                        <td style="border: 1px solid #dee2e6; padding: 10px; font-weight: bold;">@cr.Firstname @cr.Lastname</td>
                        <td style="border: 1px solid #dee2e6; padding: 10px;">@cr.CommissionType</td>
                        <td style="border: 1px solid #dee2e6; padding: 10px;">@cr.Details</td>

                        <td style="border: 1px solid #dee2e6; padding: 10px;">
                            @foreach (var row in referenceImages)
                            {
                                @if (cr.Id == row.CommissionRequestId && cr.AcceptedStatus is not null)
                                {
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(row.Image)" class="d-block" style="max-width: 50px; margin-bottom: 5px;">
                                }
                            }
                        </td>

                        <td style="border: 1px solid #dee2e6; padding: 10px;">@cr.Email</td>
                        <td style="border: 1px solid #dee2e6; padding: 10px; color: #007bff;">$@cr.CommissionCost</td>
                        <td style="border: 1px solid #dee2e6; padding: 10px; color: #28a745;">$@cr.AmmountAlreadyPaid</td>
                        <td style="border: 1px solid #dee2e6; padding: 10px; color:
                        @(cr.AcceptedStatus == "PENDING" ? "#007bff" : (cr.AcceptedStatus == "DENIED" ? "#ff0001" : "#28a745"));">
                            @cr.AcceptedStatus
                        </td>
                        @if (cr.AcceptedStatus == "PENDING")
                        {
                            <td style="border: 1px solid #dee2e6; padding: 10px;">
                                <button @onclick="async () => { await Accept(cr.Id); }" class="btn btn-primary" aria-disabled="false">
                                    Accept
                                </button>
                            </td>
                            <td style="border: 1px solid #dee2e6; padding: 10px;">
                                <button @onclick="() => { Deny(cr); commissions.Remove(cr); }" class="btn btn-danger" aria-disabled="false">
                                    Deny
                                </button> @*delete sets to null*@
                            </td>
                        }
                        else
                        {
                            <td style="border: 1px solid #dee2e6; padding: 10px;"></td>
                            <td style="border: 1px solid #dee2e6; padding: 10px;"></td>
                        }
                    </tr>
                }
        </tbody>
    </table>
</div>


@code {
    private List<CommissionRequest>? commissions { get; set; }
    private List<ReferenceImage>? referenceImages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var context = contextFactory.CreateDbContext();

            commissions = await context.CommissionRequests
                .Where(i => i.ArtistId == 1)
                .OrderBy(c=> c.AcceptedStatus)
                .ToListAsync();

            referenceImages = await context.ReferenceImages
                .ToListAsync();

        }
        catch (Exception ex)
        {
            logger.LogError(ex, "An error occurred during the initialization of the Commissions component.");
        }

    }

    public async Task Accept(int id)
    {
        try
        {
            var context = contextFactory.CreateDbContext();

            CommissionRequest? crtoupdate = await context.CommissionRequests
                .Where(c => c.Id == id)
                .FirstOrDefaultAsync();

            if (crtoupdate != null)
            {
                crtoupdate.AcceptedStatus = "ACCEPTED";
                await context.SaveChangesAsync();
            }
            nav.NavigateTo("/admin/commissions", true);

        }
        catch (Exception ex)
        {
            logger.LogError(ex, "An error occurred during the Accept method.");
        }
    }

    public async Task Deny(CommissionRequest cr)
    {
        try
        {
            var context = contextFactory.CreateDbContext();

            var request = await context.CommissionRequests
                .Where(c => c.Id == cr.Id)
                .FirstOrDefaultAsync();

            request.AcceptedStatus = "DENIED";
            await context.SaveChangesAsync();

        }
        catch (Exception ex)
        {
            logger.LogError(ex, "An error occurred during the Deny method.");
        }

    }
}