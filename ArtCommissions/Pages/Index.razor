@page "/"
@using ArtCommissions.Data;
@using System.Drawing;
@using System.IO;
@inject IDbContextFactory<PostgresContext> contextFactory
@inject IJSRuntime JSRuntime

@if (imageBytes.Count != 0)
{
    <div class="d-flex flex-column py-lg-5">
        <div class="d-lg-flex order-lg-1">
            @* Carousel *@
            <div id="@carouselName" class="d-flex order-lg-1 justify-content-center align-items-center col-lg-7 m-lg-5 carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="3000" data-bs-pause="false">
                <div class="carousel-inner">
                    @for (int i = 0; i < imageBytes.Count; i++)
                    {   
                        @if (i == 0)
                        {
                            <div class="carousel-item active">
                                <img class="img img-responsive rounded" src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes[i])" />
                            </div>
                        }
                        else
                        {
                            <div class="carousel-item">
                                <img class="img img-responsive rounded" src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes[i])" />
                            </div>
                        }
                    }
                </div>
            </div>

            @* Artist Icon *@
            <div class="d-none d-lg-flex order-lg-0 justify-content-center align-items-center m-lg-5 col-lg-3">
                <img class="w-sm-50 w-lg-25 img img-fluid rounded-circle img-thumbnail" src="data:image/jpeg;base64,@Convert.ToBase64String(artist.Profilepic)">
            </div>
        </div>
        <div class="d-flex justify-content-center align-items-center mt-3 order-lg-0">
            <h1 class="px-5 pb-2" style="border-bottom: 3px solid #D5DB9F;">@artist.Firstname @artist.Lastname</h1>
        </div>
    </div>
    
    <div class="d-flex px-2 m-5 justify-content-center">
        @* Artist Info *@
        <div class="col-lg-8 border border-dark border-3 rounded p-5 mb-5">
            <p class="fs-4"><b>About me + Experience:</b> @artist.Aboutme</p>
        </div>
    </div>
}


@code {
    //TODO: still need to make artist profile table in our database (profile picture)
    [Parameter]
    public string? Name { get; set; }
    public string? About { get; set; }
    private List<byte[]> imageBytes { get; set; } = new();
    private byte[]? pfp { get; set; }
    private Artist? artist { get; set; }
    private List<Social> socials { get; set; } = new();

    const string carouselName = "carouselExampleIndicators";

    protected override async Task OnInitializedAsync()
    {
        using var context = contextFactory.CreateDbContext();

        artist = await context.Artists
            .FirstOrDefaultAsync(i => i.Id == 1);

        var exampleImages = await context.ExampleImages
            .Where(i => i.IsInCarousel == true)
            .Where(c => c.CommissionExample.ArtistId==1)
            .ToListAsync();

        socials = await context.Socials
            .Where(i => i.ArtistId == 1)
            .ToListAsync();

        foreach (ExampleImage e in exampleImages)
        {
            imageBytes.Add(e.Image);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] args = { carouselName };
        await JSRuntime.InvokeVoidAsync("startCarousel", args);
    }
}