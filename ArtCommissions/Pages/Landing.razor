@page "/"
@using ArtCommissions.Data;
@using Microsoft.EntityFrameworkCore;
@using System.Drawing;
@using System.IO;
@inject IDbContextFactory<PostgresContext> contextFactory
@inject NavigationManager navManager


<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/Blazor.Bootstrap.bundle.scp.css" rel="stylesheet" />
</head>

<body>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <!-- Add chart.js reference if chart components are used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
</body>

<h3>ArtistProfile</h3>
<p> currently viewing the profile of artist @fname @lname</p>
<hr />
<p> about me: @aboutme</p>
<p>@if (socials is not null)
    {
        @foreach (Social row in socials)
        {
            <p>@row.Site : <a href="@row.Link">@row.Link</a></p>
        }
    }
    else
    {
        <p>no socials found</p>
    }

</p>

@if (imageBytes != null)
{
    <img src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes)" alt="Test Image" />
}
else
{
    <p>No image</p>
}

<hr />
@if (imageBytes != null)
{
    <!-- Carousel -->
    <div id="demo" class="carousel slide" data-bs-ride="carousel">

        <!-- Indicators/dots -->
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#demo" data-bs-slide-to="0" class="active"></button>
            <button type="button" data-bs-target="#demo" data-bs-slide-to="1"></button>
            <button type="button" data-bs-target="#demo" data-bs-slide-to="2"></button>
        </div>

        <!-- The slideshow/carousel -->
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(pictures)" alt="Los Angeles" class="d-block w-100">
            </div>
            <div class="carousel-item">
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes)" alt="Chicago" class="d-block w-100">
            </div>
            <div class="carousel-item">
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(imageBytes)" alt="New York" class="d-block w-100">
            </div>
        </div>

        <!-- Left and right controls/icons -->
        <button class="carousel-control-prev" type="button" data-bs-target="#demo" data-bs-slide="prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#demo" data-bs-slide="next">
            <span class="carousel-control-next-icon"></span>
        </button>
    </div>
}
else
{
    <p>No image</p>
}

@code {
    //TODO: still need to make artist profile table in our database (profile picture)
    [Parameter]
    public int id { get; set; } = 1;
    public string? fname { get; set; }
    public string? lname { get; set; }
    public string? aboutme { get; set; }
    public IEnumerable<Social> socials { get; set; }
    private byte[] imageBytes { get; set; } = null;
    public byte[] pictures { get; set; } = null;



    protected override async Task OnInitializedAsync()
    {
        using var context = contextFactory.CreateDbContext();

        var artist = await context.Artists
            .Include(a => a.Socials)
            .FirstOrDefaultAsync(i => i.Id == id);

        var picturebyte = await context.ExampleImages.Where(i => i.Id == 3).FirstOrDefaultAsync();



        fname = artist.Firstname;
        lname = artist.Lastname;
        aboutme = artist.Aboutme;
        socials = artist.Socials;
        imageBytes = artist.Profilepic;
        pictures = picturebyte.Image;


    }

    async Task refreshAsync()
    {


    }
}